) +
coord_flip()  # Flip coordinates for horizontal bars
# Define UI for application
ui <- fluidPage(
titlePanel("Bike Crashes Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("rate_type", "Select Rate Type:",
choices = c("fatality Rate", "injury Rate"),
selected = "fatality Rate")
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output) {
# Create a boxplot
output$plot <- renderPlot({
# Define custom color palette
colors <- rainbow(length(unique(bikes_new$highway_type)))
if (input$rate_type == "fatality Rate") {
data <- bikes_new %>%
filter(highway_type != "total") %>%
mutate(rate = fatality / total)
ylab <- "fatality Rate (%)"
} else {
data <- bikes_new %>%
filter(highway_type != "total") %>%
mutate(rate = injury / total)
ylab <- "injury Rate (%)"
}
ggplot(data, aes(x = reorder(highway_type, rate), y = rate, fill = highway_type)) +
geom_boxplot(outlier.colour = "black", outlier.shape = 1, width = 0.5) +  # Use boxplot geometry with specified aesthetics for outliers
scale_fill_manual(values = colors) +  # Apply custom color palette
labs(title = paste(input$rate_type, "Among Types of Streets"),
x = NULL,
y = ylab) +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, margin = margin(b = 20)),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14, margin = margin(t = 0, r = 10)),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color = "black", fill = NA, size = 0.5)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
View(bikes_new)
bikes_filtered <- bikes_new %>%
filter(highway_type != "total" & highway_type != "One-Way City Street" & highway_type != "Expressway")
fatality_rate <- bikes_filtered %>%
mutate(fatality_rate = fatality / total * 100) %>%
group_by(highway_type) %>%
summarise(mean_fatality_rate = mean(fatality_rate, na.rm = TRUE))
color_palette <- RColorBrewer::brewer.pal(8, "Set2")
ggplot(fatality_rate, aes(x = reorder(highway_type, mean_fatality_rate), y = mean_fatality_rate, fill = highway_type)) +
geom_bar(stat = "identity", width = 0.6) +
scale_fill_manual(values = color_palette) +
labs(title = "Average Fatality Rate Among Types of Streets",
x = NULL,
y = "Average Fatality Rate (%)") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, margin = margin(b = 20)),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14, margin = margin(t = 0, r = 10)),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color = "black", fill = NA, size = 0.5)
) +
coord_flip()
bikes_filtered <- bikes_new %>%
filter(highway_type != "total" & highway_type != "One-Way City Street" & highway_type != "Expressway")
fatality_rate <- bikes_filtered %>%
mutate(fatality_rate = fatality / total * 100) %>%
group_by(highway_type) %>%
summarise(mean_fatality_rate = mean(fatality_rate, na.rm = TRUE))
color_palette <- RColorBrewer::brewer.pal(8, "Set2")
ggplot(fatality_rate, aes(x = reorder(highway_type, mean_fatality_rate), y = mean_fatality_rate, fill = highway_type)) +
geom_bar(stat = "identity", width = 0.6) +
scale_fill_manual(values = color_palette) +
labs(title = "Average Fatality Rate Among Types of Streets",
x = NULL,
y = "Average Fatality Rate (%)") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, margin = margin(b = 20)),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14, margin = margin(t = 0, r = 10)),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color = "black", fill = NA, size = 0.5)
) +
coord_flip()
fatality_rate <- bikes_new %>%
mutate(fatality_rate = fatality / total * 100) %>%
group_by(highway_type) %>%
summarise(mean_fatality_rate = mean(fatality_rate, na.rm = TRUE))
color_palette <- RColorBrewer::brewer.pal(8, "Set2")
ggplot(fatality_rate, aes(x = reorder(highway_type, mean_fatality_rate), y = mean_fatality_rate, fill = highway_type)) +
geom_bar(stat = "identity", width = 0.6) +
scale_fill_manual(values = color_palette) +
labs(title = "Average Fatality Rate Among Types of Streets",
x = NULL,
y = "Average Fatality Rate (%)") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, margin = margin(b = 20)),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14, margin = margin(t = 0, r = 10)),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color = "black", fill = NA, size = 0.5)
) +
coord_flip()
# Define UI for application
ui <- fluidPage(
titlePanel("Bike Crashes Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("rate_type", "Select Rate Type:",
choices = c("Fatality Rate", "Injury Rate"),
selected = "Fatality Rate")
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output) {
# Create a bar graph
output$plot <- renderPlot({
# Define custom color palette
colors <- rainbow(length(unique(bikes_new$highway_type)))
if (input$rate_type == "Fatality Rate") {
data <- bikes_new %>%
filter(highway_type != "total") %>%
group_by(highway_type) %>%
summarise(avg_rate = mean(fatality / total * 100, na.rm = TRUE))
ylab <- "Fatality Rate (%)"
} else {
data <- bikes_new %>%
filter(highway_type != "total") %>%
group_by(highway_type) %>%
summarise(avg_rate = mean(injury / total * 100, na.rm = TRUE))
ylab <- "Injury Rate (%)"
}
ggplot(data, aes(x = reorder(highway_type, avg_rate), y = avg_rate, fill = highway_type)) +
geom_bar(stat = "identity", width = 0.5) +  # Use bar graph with specified aesthetics
scale_fill_manual(values = colors) +  # Apply custom color palette
labs(title = paste(input$rate_type, "Among Types of Streets"),
x = NULL,
y = ylab) +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, margin = margin(b = 20)),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14, margin = margin(t = 0, r = 10)),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color = "black", fill = NA, size = 0.5)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Calculate fatality ratio
bikes_new <- bikes_new %>%
mutate(fatality_ratio = fatality / total)
# Filter out rows with NA values in fatality_ratio
bikes_filtered <- bikes_new %>%
filter(!is.na(fatality_ratio))
# Select the top N counties with the highest fatality ratios
top_counties <- bikes_filtered %>%
top_n(n = 6, wt = fatality_ratio)  # Select top 6 counties; adjust "n" as needed
# Create a color palette with a unique color for each county
county_colors <- viridis::viridis(nrow(top_counties))
# Create a bar plot of fatality to crash ratios for the top N counties
ggplot(top_counties, aes(x = reorder(county, fatality_ratio), y = fatality_ratio, fill = county)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = county_colors) +  # Assign unique colors to each county
labs(title = "Top 5 Counties with Highest Fatality to Crash Ratio",
x = "County",
y = "Fatality to Crash Ratio") +
theme_minimal() +
coord_flip() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 8))  # Adjust angle and size of x-axis labels
bikes_filtered <- bikes_new %>%
filter(highway_type != "TOTAL")
fatality_rate <- bikes_filtered %>%
mutate(fatality_rate = fatality / total * 100) %>%
group_by(highway_type) %>%
summarise(mean_fatality_rate = mean(fatality_rate, na.rm = TRUE))
color_palette <- RColorBrewer::brewer.pal(8, "Set2")
ggplot(fatality_rate, aes(x = reorder(highway_type, mean_fatality_rate), y = mean_fatality_rate, fill = highway_type)) +
geom_bar(stat = "identity", width = 0.6) +
scale_fill_manual(values = color_palette) +
labs(title = "Average Fatality Rate Among Types of Streets",
x = NULL,
y = "Average Fatality Rate (%)") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, margin = margin(b = 20)),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14, margin = margin(t = 0, r = 10)),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color = "black", fill = NA, size = 0.5)
) +
coord_flip()
bikes_filtered <- bikes_new %>%
filter(highway_type != "TOTAL")
fatality_rate <- bikes_filtered %>%
mutate(fatality_rate = fatality / total * 100) %>%
group_by(`Highway Type`) %>%  # Changed key name to "Highway Type"
summarise(mean_fatality_rate = mean(fatality_rate, na.rm = TRUE))
bikes_filtered <- bikes_new %>%
filter(highway_type != "TOTAL")
fatality_rate <- bikes_filtered %>%
mutate(fatality_rate = fatality / total * 100) %>%
group_by(highway_type) %>%
summarise(mean_fatality_rate = mean(fatality_rate, na.rm = TRUE))
color_palette <- RColorBrewer::brewer.pal(8, "Set2")
ggplot(fatality_rate, aes(x = reorder(highway_type, mean_fatality_rate), y = mean_fatality_rate, fill = highway_type)) +
geom_bar(stat = "identity", width = 0.6) +
scale_fill_manual(values = color_palette, name = "Highway Type") +  # Set legend name
labs(title = "Average Fatality Rate Among Types of Streets",
x = NULL,
y = "Average Fatality Rate (%)") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, margin = margin(b = 20)),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14, margin = margin(t = 0, r = 10)),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(color = "black", fill = NA, size = 0.5)
) +
coord_flip()
bike_crashes <- bike_crashes %>%
mutate(fatality_rate = fatal / total *100)
bikes_new %>%
mutate(fatality_rate = fatal / total *100) %>%
ggplot(aes(x = population, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate") +
theme_minimal()
bikes_new %>%
mutate(fatality_rate = fatality / total *100) %>%
ggplot(aes(x = population, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate") +
theme_minimal()
bikes_new %>%
mutate(fatality_rate = fatality / total *100) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate") +
theme_minimal()
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total *100) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate") +
theme_minimal()
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total *100) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate") +
theme_minimal() +
scale_y_log10()
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total *100) %>%
filter(!is.na(fatality_rate)) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate") +
theme_minimal() +
scale_y_log10()
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total *100) %>%
filter(fatality_rate != 0) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate") +
theme_minimal() +
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total *100) %>%
filter(fatality_rate != 0) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate") +
theme_minimal() +
options(scipen = 999) %>%
bikes_new %>%
mutate(fatality_rate = fatality / total *100) %>%
filter(fatality_rate != 0) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate") +
theme_minimal() +
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total * 100) %>%
filter(fatality_rate != 0) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate") +
theme_minimal()
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total * 100) %>%
filter(fatality_rate != 0) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population Size",
y = "Fatality Rate (%)") +
theme_minimal()
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total * 100) %>%
filter(fatality_rate != 0) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population Size",
y = "Fatality Rate (%)") +
theme_minimal()
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total * 100) %>%
filter(fatality_rate != 0) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point(color = "blue", size = 3) +  # Scatter plot with blue points
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed", size = 1) +  # Add red dashed linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate (%)") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, margin = margin(b = 20)),  # Larger title font size and centered title
axis.title = element_text(size = 14),  # Adjusted axis title size
axis.text = element_text(size = 12),  # Adjusted axis text size
legend.title = element_text(size = 14),  # Adjusted legend title size
legend.text = element_text(size = 12),  # Adjusted legend text size
panel.border = element_rect(color = "black", fill = NA, size = 0.5)  # Add border around plot
)
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total * 100) %>%
filter(fatality_rate != 0) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = TRUE) +
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population Size",
y = "Fatality Rate (%)") +
theme_minimal()
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total * 100) %>%
filter(fatality_rate != 0) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population Size",
y = "Fatality Rate (%)") +
theme_minimal()
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total * 100) %>%
filter(fatality_rate != 0) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point(color = "blue", size = 3) +  # Scatter plot with blue points
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed", size = 0.6) +  # Add red dashed linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate (%)") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, margin = margin(b = 20)),  # Larger title font size and centered title
axis.title = element_text(size = 14),  # Adjusted axis title size
axis.text = element_text(size = 12),  # Adjusted axis text size
legend.title = element_text(size = 14),  # Adjusted legend title size
legend.text = element_text(size = 12),  # Adjusted legend text size
panel.border = element_rect(color = "black", fill = NA, size = 0.5)  # Add border around plot
)
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total * 100) %>%
filter(fatality_rate != 0) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point(color = "blue", size = 3) +  # Scatter plot with blue points
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed", size = 0.85) +  # Add red dashed linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate (%)") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, margin = margin(b = 20)),  # Larger title font size and centered title
axis.title = element_text(size = 14),  # Adjusted axis title size
axis.text = element_text(size = 12),  # Adjusted axis text size
legend.title = element_text(size = 14),  # Adjusted legend title size
legend.text = element_text(size = 12),  # Adjusted legend text size
panel.border = element_rect(color = "black", fill = NA, size = 0.5)  # Add border around plot
)
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total * 100) %>%
filter(fatality_rate != 0) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point(color = "blue", size = 2) +  # Scatter plot with blue points
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed", size = 0.85) +  # Add red dashed linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate (%)") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, margin = margin(b = 20)),  # Larger title font size and centered title
axis.title = element_text(size = 14),  # Adjusted axis title size
axis.text = element_text(size = 12),  # Adjusted axis text size
legend.title = element_text(size = 14),  # Adjusted legend title size
legend.text = element_text(size = 12),  # Adjusted legend text size
panel.border = element_rect(color = "black", fill = NA, size = 0.5)  # Add border around plot
)
options(scipen = 999)
bikes_new %>%
mutate(fatality_rate = fatality / total * 100) %>%
filter(fatality_rate != 0) %>%
ggplot(aes(x = pop, y = fatality_rate)) +
geom_point(color = "blue", size = 2) +  # Scatter plot with blue points
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed", size = 0.85) +  # Add red dashed linear regression line
labs(title = "Correlation between Population Size and Fatality Rate",
x = "Population",
y = "Fatality Rate (%)") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, hjust = 0.5, margin = margin(b = 20)),  # Larger title font size and centered title
axis.title = element_text(size = 14),  # Adjusted axis title size
axis.text = element_text(size = 12),  # Adjusted axis text size
legend.title = element_text(size = 14),  # Adjusted legend title size
legend.text = element_text(size = 12),  # Adjusted legend text size
panel.border = element_rect(color = "black", fill = NA, size = 0.5)  # Add border around plot
) +
scale_x_log10()
