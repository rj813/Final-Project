knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("janitor")
library("naniar")
library("lubridate")
library("readxl")
library("rio")
car_crashes <- read_csv("data/travel-and-crash-summary-for-county.csv") #car crashes by county, https://catalog.data.gov/dataset/2021-crash-data-on-state-highway-system
View(car_crashes)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("shiny")
library(shiny)
library("tidyverse")
library("palmerpenguins")
runApp("plot_iris.R")
names(palmerpenguins)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm")
)
server <- function(input, output) {
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
)
server <- function(input, output) {
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
plotOutput("plot", width="500px", height="400px") # providing the size/aspect of the visual
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y=input$y, color="species")) +
geom_point()+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
names(homerange)
homerange %>%
ggplot(aes(x=locomotion, fill=trophic.guild)) +
geom_bar(position="dodge")
homerange %>%
ggplot(aes(x=locomotion, fill=thermoregulation)) +
geom_bar(position="dodge")
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("thermoregulation", "trophic.guild"))
plotOutput("plot", width="500px", height="400px")
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("thermoregulation", "trophic.guild"))
plotOutput("plot", width="500px", height="400px")
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("thermoregulation", "trophic.guild")),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange, aes_string(x=locomotion, color=input$x)) +
geom_bar(position = "dodge")+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices = c("thermoregulation", "trophic.guild")),
selected="trophic.guild"),
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices = c("thermoregulation", "trophic.guild"),
selected="trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange, aes_string(x="locomotion", fill=input$x)) +
geom_bar(position = "dodge", alpha=0.8, color="black")+
labs(x=NULL, fill="Fill Variable") +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
bike_crashes <- read_csv("data/bicycle-fatality-and-injury-data-by-county.csv") #bike injury data, part of vehicle crash data set
View(bike_crashes)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
bike_crashes <- read_csv("data/bicycle-fatality-and-injury-data-by-county.csv") #bike injury data, part of vehicle crash data set
bike_crashes <- read_csv("data/datatesting/bicycle-fatality-and-injury-data-by-county.csv") #bike injury data, part of vehicle crash data set
bike_crashes <- read_csv("data/datatesting/data/bicycle-fatality-and-injury-data-by-county.csv") #bike injury data, part of vehicle crash data set
bike_crashes <- read_csv("/datatesting/data/bicycle-fatality-and-injury-data-by-county.csv") #bike injury data, part of vehicle crash data set
bike_crashes <- read_csv("datatesting/data/bicycle-fatality-and-injury-data-by-county.csv") #bike injury data, part of vehicle crash data set
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
ouput$plot <- renderPlot({
homerange %>%
filter(taxon=input$x) %>%
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", allpha=0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon=input$x) %>%
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", allpha=0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon=input$x) %>% #reactive part of the app is the filter
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", alpha=0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon=input$x) %>% #reactive part of the app is the filter
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", alpha=0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon=input$x) %>% #reactive part of the app is the filter
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", alpha=0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon=input$x) %>% #reactive part of the app is the filter
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", alpha=0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon==input$x) %>% #reactive part of the app is the filter
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", alpha=0.8)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select Population", choice=unique(wolves$pop)), hr()
)
)
)
)
server <- function(input, output) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select Population", choice=unique(wolves$pop)), hr()
)
)
)
)
server <- function(input, output) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select Population", choice=unique(wolves$pop)), hr()
), #closes the first box
box(width=7,
plotOutput("plot", width="600px", height="400px")
) # closes the 2nd box
) # closes the row
) # closes the dashboard body
) # closes the UI
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select Population", choice=unique(wolves$pop)), hr()
), #closes the first box
box(width=7,
plotOutput("plot", width="600px", height="400px")
) # closes the 2nd box
) # closes the row
) # closes the dashboard body
) # closes the UI
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=input$x))+
geom_bar()+
})
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select Population", choice=unique(wolves$pop)), hr()
), #closes the first box
box(width=7,
plotOutput("plot", width="600px", height="400px")
) # closes the 2nd box
) # closes the row
) # closes the dashboard body
) # closes the UI
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=input$x))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select Population", choice=unique(wolves$pop)), hr() #gives some help with multiple observations
), #closes the first box
box(width=7,
plotOutput("plot", width="600px", height="400px")
) # closes the 2nd box
) # closes the row
) # closes the dashboard body
) # closes the UI
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop==input$x) %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
library(shinythemes)
install.packages("shinythemes")
library(shinythemes)
ui <- fluidPage(
shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
theme = shinytheme("cerulean"),
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
#shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
theme = shinytheme("slate"),
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
tabyl(County
)
tabyl(bike_crashes$County
)
tabyl(n_distinct(bike_crashes$County
tabyl(distinct(bike_crashes$County
tabyl(N_distinct(bike_crashes$County
tabyl(N_distinct(bike_crashes$County
tabyl(n_distinct(bike_crashes$County
)
