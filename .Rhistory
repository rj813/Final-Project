output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y=input$y, color="species")) +
geom_point()+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
names(homerange)
homerange %>%
ggplot(aes(x=locomotion, fill=trophic.guild)) +
geom_bar(position="dodge")
homerange %>%
ggplot(aes(x=locomotion, fill=thermoregulation)) +
geom_bar(position="dodge")
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("thermoregulation", "trophic.guild"))
plotOutput("plot", width="500px", height="400px")
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("thermoregulation", "trophic.guild"))
plotOutput("plot", width="500px", height="400px")
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("thermoregulation", "trophic.guild")),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange, aes_string(x=locomotion, color=input$x)) +
geom_bar(position = "dodge")+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices = c("thermoregulation", "trophic.guild")),
selected="trophic.guild"),
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices = c("thermoregulation", "trophic.guild"),
selected="trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange, aes_string(x="locomotion", fill=input$x)) +
geom_bar(position = "dodge", alpha=0.8, color="black")+
labs(x=NULL, fill="Fill Variable") +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
bike_crashes <- read_csv("data/bicycle-fatality-and-injury-data-by-county.csv") #bike injury data, part of vehicle crash data set
View(bike_crashes)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
bike_crashes <- read_csv("data/bicycle-fatality-and-injury-data-by-county.csv") #bike injury data, part of vehicle crash data set
bike_crashes <- read_csv("data/datatesting/bicycle-fatality-and-injury-data-by-county.csv") #bike injury data, part of vehicle crash data set
bike_crashes <- read_csv("data/datatesting/data/bicycle-fatality-and-injury-data-by-county.csv") #bike injury data, part of vehicle crash data set
bike_crashes <- read_csv("/datatesting/data/bicycle-fatality-and-injury-data-by-county.csv") #bike injury data, part of vehicle crash data set
bike_crashes <- read_csv("datatesting/data/bicycle-fatality-and-injury-data-by-county.csv") #bike injury data, part of vehicle crash data set
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
ouput$plot <- renderPlot({
homerange %>%
filter(taxon=input$x) %>%
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", allpha=0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon=input$x) %>%
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", allpha=0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon=input$x) %>% #reactive part of the app is the filter
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", alpha=0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon=input$x) %>% #reactive part of the app is the filter
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", alpha=0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon=input$x) %>% #reactive part of the app is the filter
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", alpha=0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon=input$x) %>% #reactive part of the app is the filter
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", alpha=0.8)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by taxon"),
selectInput("x","Select Taxon",
choices=c("birds", "lake fishes", "lizards", "marine fishes", "river fishes", "mammals", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
) # closes the UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon==input$x) %>% #reactive part of the app is the filter
ggplot(aes(x=log10.hra)) +
geom_density(fill="steelblue", color="black", alpha=0.8)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select Population", choice=unique(wolves$pop)), hr()
)
)
)
)
server <- function(input, output) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select Population", choice=unique(wolves$pop)), hr()
)
)
)
)
server <- function(input, output) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select Population", choice=unique(wolves$pop)), hr()
), #closes the first box
box(width=7,
plotOutput("plot", width="600px", height="400px")
) # closes the 2nd box
) # closes the row
) # closes the dashboard body
) # closes the UI
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select Population", choice=unique(wolves$pop)), hr()
), #closes the first box
box(width=7,
plotOutput("plot", width="600px", height="400px")
) # closes the 2nd box
) # closes the row
) # closes the dashboard body
) # closes the UI
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=input$x))+
geom_bar()+
})
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select Population", choice=unique(wolves$pop)), hr()
), #closes the first box
box(width=7,
plotOutput("plot", width="600px", height="400px")
) # closes the 2nd box
) # closes the row
) # closes the dashboard body
) # closes the UI
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=input$x))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="Sex Composition by Wolf Population"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "Select Population", choice=unique(wolves$pop)), hr() #gives some help with multiple observations
), #closes the first box
box(width=7,
plotOutput("plot", width="600px", height="400px")
) # closes the 2nd box
) # closes the row
) # closes the dashboard body
) # closes the UI
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop==input$x) %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
library(shinythemes)
install.packages("shinythemes")
library(shinythemes)
ui <- fluidPage(
shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
theme = shinytheme("cerulean"),
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
#shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
theme = shinytheme("slate"),
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
tabyl(County
)
tabyl(bike_crashes$County
)
tabyl(n_distinct(bike_crashes$County
tabyl(distinct(bike_crashes$County
tabyl(N_distinct(bike_crashes$County
tabyl(N_distinct(bike_crashes$County
tabyl(n_distinct(bike_crashes$County
)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(janitor)
bikes <- read_csv("datatesting/data/bicycle-fatality-and-injury-data-by-county.csv")
knitr::opts_chunk$set(echo = TRUE)
write.csv(county_data, "datatesting/data/county_data.csv", row.names = F) #kevin
# Created a data frame with the county names, latitudes, and longitudes using the help of ChatGPT
county_data <- data.frame(
county = c("ALAMEDA", "ALPINE", "AMADOR", "BUTTE", "CALAVERAS", "COLUSA", "CONTRA COSTA", "DEL NORTE",
"EL DORADO", "FRESNO", "GLENN", "HUMBOLDT", "IMPERIAL", "INYO", "KERN", "KINGS",
"LAKE", "LASSEN", "LOS ANGELES", "MADERA", "MARIN", "MARIPOSA", "MENDOCINO", "MERCED",
"MODOC", "MONO", "MONTEREY", "NAPA", "NEVADA", "ORANGE", "PLACER", "PLUMAS",
"RIVERSIDE", "SACRAMENTO", "SAN BENITO", "SAN BERNARDINO", "SAN DIEGO", "SAN FRANCISCO",
"SAN JOAQUIN", "SAN LUIS OBISPO", "SAN MATEO", "SANTA BARBARA", "SANTA CLARA", "SANTA CRUZ",
"SHASTA", "SIERRA", "SISKIYOU", "SOLANO", "SONOMA", "STANISLAUS", "SUTTER", "TEHAMA",
"TRINITY", "TULARE", "TUOLUMNE", "VENTURA", "YOLO", "YUBA"),
latitude = c(37.6017, 38.5974, 38.3489, 39.6254, 38.196, 39.1789, 37.9191, 41.7435,
38.7787, 36.9859, 39.5989, 40.745, 32.8397, 36.3093, 35.3433, 36.0741,
39.1012, 40.6739, 34.0522, 36.9859, 38.0834, 37.4849, 39.5501, 37.2083,
41.5885, 37.938, 36.2168, 38.5025, 39.1347, 33.7175, 38.9045, 40.0036,
33.9534, 38.5816, 36.6115, 34.9592, 32.7157, 37.7749, 37.9577, 35.3102,
37.563, 34.4208, 37.3541, 36.9741, 40.7909, 39.5774, 41.6639, 38.3105,
38.5779, 37.5091, 39.0446, 40.1251, 40.6503, 36.1342, 37.8675, 34.3705, 38.7646, 39.2547),
longitude = c(-121.7195, -119.8203, -120.7741, -121.537, -120.6805, -122.2342, -121.9283, -123.8974,
-120.5231, -119.2321, -122.3935, -123.8695, -115.6121, -117.546, -118.7278, -119.8155,
-122.7533, -120.5579, -118.2437, -120.5824, -122.7633, -119.9663, -123.4384, -120.6977,
-120.7525, -118.8867, -121.2264, -122.2655, -121.171, -117.8311, -121.1448, -120.8393,
-117.3962, -121.4944, -121.286, -116.4194, -117.1611, -122.4194, -121.2908, -120.4358,
-122.3255, -119.6982, -121.9552, -122.0308, -121.8474, -120.5211, -122.545, -121.9018,
-122.9888, -120.9876, -121.3153, -122.2345, -123.089, -118.8597, -120.2602, -119.1391, -121.9018, -121.3999)
)
# Print the data frame with county, latitude, and longitude
print(county_data)
write.csv(county_data, "datatesting/data/county_data.csv", row.names = F) #kevin
county_data <- read_csv("datatesting/data/county_data.csv")
county_data
full_join(bikes, county_data)
cross_join(bikes, county_data)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(janitor)
bikes <- read_csv("datatesting/data/bicycle-fatality-and-injury-data-by-county.csv")
county_data <- read_csv("datatesting/data/county_data.csv")
clean_names(county_data)
write.csv(county_data, "datatesting/data/county_data.csv", row.names = F) #kevin
county_data <- read_csv("datatesting/data/county_data.csv")
county_data
full_join(bikes, county_data)
bikes
bikes <- read_csv("datatesting/data/bicycle-fatality-and-injury-data-by-county.csv")
bikes <- clean_names(bikes)
full_join(bikes, county_data)
pop <- read_csv("datatesting/data/county_populations.csv")
pop
updated_pop <- read_csv("datatesting/data/updated_county_populations.csv")
updated_pop
updated_pop <- updated_pop %>%
filter(county != "CALIFORNIA")
bikes_new <- full_join(bikes_new, updated_pop)
bikes_new <- full_join(bikes, county_data)
bikes_new <- full_join(bikes_new, updated_pop)
bikes_new
bikes_new
bikes_new <- bikes_new %>%
rename(population = "year") %>%
rename(population.1 = "population")
bikes_new <- bikes_new %>%
rename(year ="population")%>%
rename(pop = "population.1")
bikes_new
